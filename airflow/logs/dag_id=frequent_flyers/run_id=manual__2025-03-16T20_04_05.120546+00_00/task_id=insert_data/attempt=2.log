[2025-03-16T20:06:09.068+0000] {taskinstance.py:1157} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: frequent_flyers.insert_data manual__2025-03-16T20:04:05.120546+00:00 [queued]>
[2025-03-16T20:06:09.073+0000] {taskinstance.py:1157} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: frequent_flyers.insert_data manual__2025-03-16T20:04:05.120546+00:00 [queued]>
[2025-03-16T20:06:09.073+0000] {taskinstance.py:1359} INFO - Starting attempt 2 of 2
[2025-03-16T20:06:09.081+0000] {taskinstance.py:1380} INFO - Executing <Task(PostgresOperator): insert_data> on 2025-03-16 20:04:05.120546+00:00
[2025-03-16T20:06:09.084+0000] {standard_task_runner.py:57} INFO - Started process 262 to run task
[2025-03-16T20:06:09.086+0000] {standard_task_runner.py:84} INFO - Running: ['***', 'tasks', 'run', 'frequent_flyers', 'insert_data', 'manual__2025-03-16T20:04:05.120546+00:00', '--job-id', '13', '--raw', '--subdir', 'DAGS_FOLDER/frequent_flyers.py', '--cfg-path', '/tmp/tmprktowrls']
[2025-03-16T20:06:09.087+0000] {standard_task_runner.py:85} INFO - Job 13: Subtask insert_data
[2025-03-16T20:06:09.097+0000] {logging_mixin.py:151} WARNING - /home/***/.local/lib/python3.8/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-03-16T20:06:09.121+0000] {task_command.py:415} INFO - Running <TaskInstance: frequent_flyers.insert_data manual__2025-03-16T20:04:05.120546+00:00 [running]> on host 16ae585d7ab0
[2025-03-16T20:06:09.170+0000] {taskinstance.py:1660} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='frequent_flyers' AIRFLOW_CTX_TASK_ID='insert_data' AIRFLOW_CTX_EXECUTION_DATE='2025-03-16T20:04:05.120546+00:00' AIRFLOW_CTX_TRY_NUMBER='2' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-03-16T20:04:05.120546+00:00'
[2025-03-16T20:06:09.170+0000] {sql.py:274} INFO - Executing: 
    WITH stats_passenger AS (
        SELECT
            t.passenger_id,
            t.passenger_name,
            COUNT(*) AS flights_number,
            SUM(b.total_amount) AS purchase_sum
        FROM dwh_detailed.sat_tickets t
        JOIN dwh_detailed.hub_bookings hb 
            ON t.book_ref = hb.book_ref
        JOIN dwh_detailed.sat_bookings b 
            ON hb.hub_booking_id = b.hub_booking_id
        JOIN dwh_detailed.link_ticket_flights ltf 
            ON t.hub_ticket_id = ltf.hub_ticket_id
        JOIN dwh_detailed.sat_flights f 
            ON ltf.hub_flight_id = f.hub_flight_id
        GROUP BY t.passenger_id, t.passenger_name
    ),
    stats_airport AS (
        SELECT
            t.passenger_id,
            f.departure_airport AS airport_code,
            COUNT(*) AS flight_count,
            ROW_NUMBER() OVER (PARTITION BY t.passenger_id ORDER BY COUNT(*) DESC, f.departure_airport) AS rank
        FROM dwh_detailed.sat_tickets t
        JOIN dwh_detailed.link_ticket_flights ltf 
            ON t.hub_ticket_id = ltf.hub_ticket_id
        JOIN dwh_detailed.sat_flights f 
            ON ltf.hub_flight_id = f.hub_flight_id
        GROUP BY t.passenger_id, f.departure_airport
    ),
    gmv AS (
        SELECT
            passenger_id,
            purchase_sum,
            PERCENT_RANK() OVER (ORDER BY purchase_sum DESC) AS gmv_percentile
        FROM stats_passenger
    )
    DELETE FROM presentation.frequent_flyers
    WHERE created_at < NOW() - INTERVAL '1 day';

    INSERT INTO presentation.frequent_flyers (
        passenger_id, passenger_name, flights_number, purchase_sum, home_airport, customer_group
    )
    SELECT
        ps.passenger_id, 
        ps.passenger_name, 
        ps.flights_number, 
        ps.purchase_sum, 
        a.airport_code AS home_airport,
        CASE
            WHEN gmv_percentile <= 0.05 THEN '5'
            WHEN gmv_percentile <= 0.1 THEN '10'
            WHEN gmv_percentile <= 0.25 THEN '25'
            WHEN gmv_percentile <= 0.5 THEN '50'
            ELSE '50+'
        END AS customer_group
    FROM stats_passenger ps
    LEFT JOIN stats_airport a 
        ON ps.passenger_id = a.passenger_id AND a.rank = 1
    LEFT JOIN gmv g 
        ON ps.passenger_id = g.passenger_id;
[2025-03-16T20:06:09.177+0000] {base.py:73} INFO - Using connection ID '***_dwh' for task execution.
[2025-03-16T20:06:09.183+0000] {base.py:73} INFO - Using connection ID '***_dwh' for task execution.
[2025-03-16T20:06:09.188+0000] {sql.py:418} INFO - Running statement: 
    WITH stats_passenger AS (
        SELECT
            t.passenger_id,
            t.passenger_name,
            COUNT(*) AS flights_number,
            SUM(b.total_amount) AS purchase_sum
        FROM dwh_detailed.sat_tickets t
        JOIN dwh_detailed.hub_bookings hb 
            ON t.book_ref = hb.book_ref
        JOIN dwh_detailed.sat_bookings b 
            ON hb.hub_booking_id = b.hub_booking_id
        JOIN dwh_detailed.link_ticket_flights ltf 
            ON t.hub_ticket_id = ltf.hub_ticket_id
        JOIN dwh_detailed.sat_flights f 
            ON ltf.hub_flight_id = f.hub_flight_id
        GROUP BY t.passenger_id, t.passenger_name
    ),
    stats_airport AS (
        SELECT
            t.passenger_id,
            f.departure_airport AS airport_code,
            COUNT(*) AS flight_count,
            ROW_NUMBER() OVER (PARTITION BY t.passenger_id ORDER BY COUNT(*) DESC, f.departure_airport) AS rank
        FROM dwh_detailed.sat_tickets t
        JOIN dwh_detailed.link_ticket_flights ltf 
            ON t.hub_ticket_id = ltf.hub_ticket_id
        JOIN dwh_detailed.sat_flights f 
            ON ltf.hub_flight_id = f.hub_flight_id
        GROUP BY t.passenger_id, f.departure_airport
    ),
    gmv AS (
        SELECT
            passenger_id,
            purchase_sum,
            PERCENT_RANK() OVER (ORDER BY purchase_sum DESC) AS gmv_percentile
        FROM stats_passenger
    )
    DELETE FROM presentation.frequent_flyers
    WHERE created_at < NOW() - INTERVAL '1 day';

    INSERT INTO presentation.frequent_flyers (
        passenger_id, passenger_name, flights_number, purchase_sum, home_airport, customer_group
    )
    SELECT
        ps.passenger_id, 
        ps.passenger_name, 
        ps.flights_number, 
        ps.purchase_sum, 
        a.airport_code AS home_airport,
        CASE
            WHEN gmv_percentile <= 0.05 THEN '5'
            WHEN gmv_percentile <= 0.1 THEN '10'
            WHEN gmv_percentile <= 0.25 THEN '25'
            WHEN gmv_percentile <= 0.5 THEN '50'
            ELSE '50+'
        END AS customer_group
    FROM stats_passenger ps
    LEFT JOIN stats_airport a 
        ON ps.passenger_id = a.passenger_id AND a.rank = 1
    LEFT JOIN gmv g 
        ON ps.passenger_id = g.passenger_id;, parameters: None
[2025-03-16T20:06:09.190+0000] {taskinstance.py:1935} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/operators/sql.py", line 280, in execute
    output = hook.run(
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 392, in run
    self._run_command(cur, sql_statement, parameters)
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/providers/common/sql/hooks/sql.py", line 423, in _run_command
    cur.execute(sql_statement)
psycopg2.errors.UndefinedTable: relation "stats_passenger" does not exist
LINE 58:     FROM stats_passenger ps
                  ^

[2025-03-16T20:06:09.198+0000] {taskinstance.py:1398} INFO - Marking task as FAILED. dag_id=frequent_flyers, task_id=insert_data, execution_date=20250316T200405, start_date=20250316T200609, end_date=20250316T200609
[2025-03-16T20:06:09.206+0000] {standard_task_runner.py:104} ERROR - Failed to execute job 13 for task insert_data (relation "stats_passenger" does not exist
LINE 58:     FROM stats_passenger ps
                  ^
; 262)
[2025-03-16T20:06:09.227+0000] {local_task_job_runner.py:228} INFO - Task exited with return code 1
[2025-03-16T20:06:09.243+0000] {taskinstance.py:2776} INFO - 0 downstream tasks scheduled from follow-on schedule check
